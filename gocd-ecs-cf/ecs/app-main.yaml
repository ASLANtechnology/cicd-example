AWSTemplateFormatVersion: 2010-09-09
Description: >
  The CloudFormation template is designed for CI/CD example.

Parameters:
  ecsStackName:
    Description:  The name of stack of ECS.
    Type: String
  serviceName:
    Description:  Service name inside the ECS Cluster.
    Type: String
  baseStackName:
    Description: The name of stack of infrastructure building.
    Type: String
  imageVersion:
    Description:  The version of Docker Image.
    Type: String
  env:
    Description: Resouces for specific environment.
    Type: String
  s3cf:
    Description:  S3 bucket name for storage cloudformation templates.
    Type: String
    Default: "cloudformation-box/gocd-cf"
  keyPairName:
    Description:  Key pair name for ec2.
    Type: String
    Default: "demo-4-all"
  instanceType:
    Description:  instance tyep for ec2.
    Type: String
    Default: t3.small
  s3Dns:
    Description:  s3 DNS
    Type: String
    Default: "s3.amazonaws.com"

Mappings:
  RegionAMIMap:
    ap-south-1:
      AmazonLinux:   ami-06bcd1131b2f55803
    eu-west-3:
      AmazonLinux:   ami-051707cdba246187b
    eu-west-2:
      AmazonLinux:   ami-0274e11dced17bb5b
    eu-west-1:
      AmazonLinux:   ami-09693313102a30b2c
    ap-northeast-3:
      AmazonLinux:   ami-079ab661fe705c5ac
    ap-northeast-2:
      AmazonLinux:   ami-0b4fdb56a00adb616
    ap-northeast-1:
      AmazonLinux:   ami-0a2de1c3b415889d2
    sa-east-1:
      AmazonLinux:   ami-0112d42866980b373
    ca-central-1:
      AmazonLinux:   ami-076b4adb3f90cd384
    ap-southeast-1:
      AmazonLinux:   ami-08003045ea611340e
    ap-southeast-2:
      AmazonLinux:   ami-08589eca6dcc9b39c
    eu-central-1:
      AmazonLinux:   ami-0d277e62d322a5a31
    us-east-1:
      AmazonLinux:   ami-009d6802948d06e52
    us-east-2:
      AmazonLinux:   ami-02e680c4540db351e
    us-west-1:
      AmazonLinux:   ami-011b6930a81cd6aaf
    us-west-2:
      AmazonLinux:   ami-01bbe152bf19d0289


Resources:

  Ec2InstanceGroup4Ecs:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        keyPairName:  !Ref keyPairName
        ami: !FindInMap [ RegionAMIMap, !Ref "AWS::Region", AmazonLinux ]
        baseVpc:
          Fn::ImportValue:
            !Sub '${baseStackName}-${env}-baseVpc'
        s3cf: !Ref s3cf
        publicSubnet1a:
          Fn::ImportValue:
            !Sub '${baseStackName}-${env}-pub1aSubnet'
        publicSubnet1b:
          Fn::ImportValue:
            !Sub '${baseStackName}-${env}-pub1bSubnet'
        publicSubnet1c:
          Fn::ImportValue:
            !Sub '${baseStackName}-${env}-pub1cSubnet'
        privateSubnet1a:
          Fn::ImportValue:
            !Sub '${baseStackName}-${env}-pri1aSubnet'
        privateSubnet1b:
          Fn::ImportValue:
            !Sub '${baseStackName}-${env}-pri1bSubnet'
        privateSubnet1c:
          Fn::ImportValue:
            !Sub '${baseStackName}-${env}-pri1cSubnet'
        instanceType: !Ref instanceType
        ecsCluster: !Sub '${ecsStackName}-ecs-cluster'

      Tags:
        - Key: Name
          Value: ec2-asg
      TemplateURL:  !Sub
          - https://${s3Dns}/${s3Name}/ecs/app-asg.yaml
          - { s3Name: !Ref s3cf }
      TimeoutInMinutes: "60"


  EcsDeploy:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        baseVpc:
          Fn::ImportValue:
            !Sub '${baseStackName}-${env}-baseVpc'
        ecsCluster: !Sub '${ecsStackName}-ecs-cluster'
        serviceName: !Ref serviceName
        imageVersion: !Ref imageVersion
        logRetentionDays: 30
        ecrRepo: !Sub '${ecsStackName}-app-repo/${serviceName}'
        appElasticLoadBalancing: !GetAtt Ec2InstanceGroup4Ecs.Outputs.appElasticLoadBalancing

      Tags:
        - Key: Name
          Value: ecs-deploy
      TemplateURL:  !Sub
          - https://${s3Dns}/${s3Name}/ecs/app-deploy.yaml
          - { s3Name: !Ref s3cf }
      TimeoutInMinutes: "60"

Outputs:
  appElbTargetGroup:
    Description: ELB target grpup.
    Value:  !GetAtt Ec2InstanceGroup4Ecs.Outputs.appElbTargetGroup
    Export:
      Name: !Sub '${AWS::StackName}-${env}-tg'
  appElasticLoadBalancing:
    Description: ELB target grpup.
    Value:  !GetAtt Ec2InstanceGroup4Ecs.Outputs.appElasticLoadBalancing
    Export:
      Name: !Sub '${AWS::StackName}-${env}-elb'
  launchConfigurationRole:
    Description: Launch configurationrole for containers.
    Value:  !GetAtt Ec2InstanceGroup4Ecs.Outputs.launchConfigurationRole
    Export:
      Name: !Sub '${AWS::StackName}-${env}-role'
  elbDns:
    Description: DNS name of Load Balancer.
    Value:  !GetAtt Ec2InstanceGroup4Ecs.Outputs.elbDns
