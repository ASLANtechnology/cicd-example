AWSTemplateFormatVersion: 2010-09-09
Description: >
  The CloudFormation template is designed for CI/CD example.

Parameters:
  ecsStackName:
    Description:  The name of stack of ECS.
    Type: String
  serviceName:
    Description:  Service name inside the ECS Cluster.
    Type: String
  baseStackName:
    Description: The name of stack of infrastructure building.
    Type: String
  imageVersion:
    Description:  The version of Docker Image.
    Type: String
  env:
    Description: Resouces for specific environment.
    Type: String
  s3cf:
    Description:  S3 bucket name for storage cloudformation templates.
    Type: String
    Default: "cloudformation-box/gocd-cf"
  keyPairName:
    Description:  Key pair name for ec2.
    Type: String
    Default: "demo-4-all"
  instanceType:
    Description:  instance tyep for ec2.
    Type: String
    Default: t3.small


Resources:

  Ec2InstanceGroup4Ecs:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        keyPairName:  !Ref keyPairName
        baseVpc:
          Fn::ImportValue:
            !Sub '${baseStackName}-${env}-baseVpc'
        s3cf: !Ref s3cf
        publicSubnet1a:
          Fn::ImportValue:
            !Sub '${baseStackName}-${env}-pub1aSubnet'
        publicSubnet1b:
          Fn::ImportValue:
            !Sub '${baseStackName}-${env}-pub1bSubnet'
        publicSubnet1c:
          Fn::ImportValue:
            !Sub '${baseStackName}-${env}-pub1cSubnet'
        privateSubnet1a:
          Fn::ImportValue:
            !Sub '${baseStackName}-${env}-pri1aSubnet'
        privateSubnet1b:
          Fn::ImportValue:
            !Sub '${baseStackName}-${env}-pri1bSubnet'
        privateSubnet1c:
          Fn::ImportValue:
            !Sub '${baseStackName}-${env}-pri1cSubnet'
        instanceType: !Ref instanceType
        ecsCluster: !Sub '${ecsStackName}-ecs-cluster'

      Tags:
        - Key: Name
          Value: ec2-asg
      TemplateURL:  !Sub
          - https://s3.amazonaws.com/${s3Name}/ecs/app-asg.yaml
          - { s3Name: !Ref s3cf }
      TimeoutInMinutes: "60"


  EcsDeploy:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        baseVpc:
          Fn::ImportValue:
            !Sub '${baseStackName}-${env}-baseVpc'
        ecsCluster: !Sub '${ecsStackName}-ecs-cluster'
        serviceName: !Ref serviceName
        imageVersion: !Ref imageVersion
        logRetentionDays: 30
        ecrRepo: !Sub '${ecsStackName}-app-repo/${serviceName}'
        appElasticLoadBalancing: !GetAtt Ec2InstanceGroup4Ecs.Outputs.appElasticLoadBalancing

      Tags:
        - Key: Name
          Value: ecs-deploy
      TemplateURL:  !Sub
          - https://s3.amazonaws.com/${s3Name}/ecs/app-deploy.yaml
          - { s3Name: !Ref s3cf }
      TimeoutInMinutes: "60"

Outputs:
  appElbTargetGroup:
    Description: ELB target grpup.
    Value:  !GetAtt Ec2InstanceGroup4Ecs.Outputs.appElbTargetGroup
    Export:
      Name: !Sub '${AWS::StackName}-${env}-tg'
  appElasticLoadBalancing:
    Description: ELB target grpup.
    Value:  !GetAtt Ec2InstanceGroup4Ecs.Outputs.appElasticLoadBalancing
    Export:
      Name: !Sub '${AWS::StackName}-${env}-elb'
  launchConfigurationRole:
    Description: Launch configurationrole for containers.
    Value:  !GetAtt Ec2InstanceGroup4Ecs.Outputs.launchConfigurationRole
    Export:
      Name: !Sub '${AWS::StackName}-${env}-role'
  elbDns:
    Description: DNS name of Load Balancer.
    Value:  !GetAtt Ec2InstanceGroup4Ecs.Outputs.elbDns
